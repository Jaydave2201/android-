// Generated by view binder compiler. Do not edit!
package house.rent.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import house.rent.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityHomeDetailsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnContactPostOwner;

  @NonNull
  public final Button btnLocation;

  @NonNull
  public final ImageView ivPostImage;

  @NonNull
  public final TextView tvAddress;

  @NonNull
  public final TextView tvContact;

  @NonNull
  public final TextView tvEmail;

  @NonNull
  public final TextView tvLocation;

  @NonNull
  public final TextView tvNumOfBaths;

  @NonNull
  public final TextView tvNumOfBeds;

  @NonNull
  public final TextView tvPostBy;

  @NonNull
  public final TextView tvPostDescription;

  @NonNull
  public final TextView tvPostHousePrice;

  @NonNull
  public final TextView tvPostPeriod;

  @NonNull
  public final TextView tvPostTitle;

  private ActivityHomeDetailsBinding(@NonNull LinearLayout rootView,
      @NonNull Button btnContactPostOwner, @NonNull Button btnLocation,
      @NonNull ImageView ivPostImage, @NonNull TextView tvAddress, @NonNull TextView tvContact,
      @NonNull TextView tvEmail, @NonNull TextView tvLocation, @NonNull TextView tvNumOfBaths,
      @NonNull TextView tvNumOfBeds, @NonNull TextView tvPostBy,
      @NonNull TextView tvPostDescription, @NonNull TextView tvPostHousePrice,
      @NonNull TextView tvPostPeriod, @NonNull TextView tvPostTitle) {
    this.rootView = rootView;
    this.btnContactPostOwner = btnContactPostOwner;
    this.btnLocation = btnLocation;
    this.ivPostImage = ivPostImage;
    this.tvAddress = tvAddress;
    this.tvContact = tvContact;
    this.tvEmail = tvEmail;
    this.tvLocation = tvLocation;
    this.tvNumOfBaths = tvNumOfBaths;
    this.tvNumOfBeds = tvNumOfBeds;
    this.tvPostBy = tvPostBy;
    this.tvPostDescription = tvPostDescription;
    this.tvPostHousePrice = tvPostHousePrice;
    this.tvPostPeriod = tvPostPeriod;
    this.tvPostTitle = tvPostTitle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityHomeDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityHomeDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_home_details, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityHomeDetailsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnContactPostOwner;
      Button btnContactPostOwner = ViewBindings.findChildViewById(rootView, id);
      if (btnContactPostOwner == null) {
        break missingId;
      }

      id = R.id.btnLocation;
      Button btnLocation = ViewBindings.findChildViewById(rootView, id);
      if (btnLocation == null) {
        break missingId;
      }

      id = R.id.ivPostImage;
      ImageView ivPostImage = ViewBindings.findChildViewById(rootView, id);
      if (ivPostImage == null) {
        break missingId;
      }

      id = R.id.tvAddress;
      TextView tvAddress = ViewBindings.findChildViewById(rootView, id);
      if (tvAddress == null) {
        break missingId;
      }

      id = R.id.tvContact;
      TextView tvContact = ViewBindings.findChildViewById(rootView, id);
      if (tvContact == null) {
        break missingId;
      }

      id = R.id.tvEmail;
      TextView tvEmail = ViewBindings.findChildViewById(rootView, id);
      if (tvEmail == null) {
        break missingId;
      }

      id = R.id.tvLocation;
      TextView tvLocation = ViewBindings.findChildViewById(rootView, id);
      if (tvLocation == null) {
        break missingId;
      }

      id = R.id.tvNumOfBaths;
      TextView tvNumOfBaths = ViewBindings.findChildViewById(rootView, id);
      if (tvNumOfBaths == null) {
        break missingId;
      }

      id = R.id.tvNumOfBeds;
      TextView tvNumOfBeds = ViewBindings.findChildViewById(rootView, id);
      if (tvNumOfBeds == null) {
        break missingId;
      }

      id = R.id.tvPostBy;
      TextView tvPostBy = ViewBindings.findChildViewById(rootView, id);
      if (tvPostBy == null) {
        break missingId;
      }

      id = R.id.tvPostDescription;
      TextView tvPostDescription = ViewBindings.findChildViewById(rootView, id);
      if (tvPostDescription == null) {
        break missingId;
      }

      id = R.id.tvPostHousePrice;
      TextView tvPostHousePrice = ViewBindings.findChildViewById(rootView, id);
      if (tvPostHousePrice == null) {
        break missingId;
      }

      id = R.id.tvPostPeriod;
      TextView tvPostPeriod = ViewBindings.findChildViewById(rootView, id);
      if (tvPostPeriod == null) {
        break missingId;
      }

      id = R.id.tvPostTitle;
      TextView tvPostTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvPostTitle == null) {
        break missingId;
      }

      return new ActivityHomeDetailsBinding((LinearLayout) rootView, btnContactPostOwner,
          btnLocation, ivPostImage, tvAddress, tvContact, tvEmail, tvLocation, tvNumOfBaths,
          tvNumOfBeds, tvPostBy, tvPostDescription, tvPostHousePrice, tvPostPeriod, tvPostTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
